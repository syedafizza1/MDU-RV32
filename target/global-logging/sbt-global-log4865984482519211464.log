[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-4)))[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Processing"})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/Documents/mdu_rv32/src/main/scala/MduControl.scala","languageId":"scala","version":1,"text":"import chisel3._\nimport chisel3.util._\nimport chisel3.experimental._\n\nclass MduControl extends Module {\n  val io = IO(new Bundle {\n    val aluOp: UInt = Input(UInt(2.W))\n    val f7: UInt = Input(UInt(7.W))\n    val f3: UInt = Input(UInt(3.W))\n    val aluSrc: Bool = Input(Bool())\n    val op: UInt = Output(UInt(4.W))\n  })\n\n  when(io.f7 === 1.U && (io.f3 === 0.U || io.f3 === 1.U || io.f3 === 2.U || io.f3 === 3.U || io.f3 === 4.U || io.f3 === 5.U || io.f3 === 6.U || io.f3 === 7.U)){\n      io.op := io.f3\n  }\n  .otherwise{\n      io.op := io.aluOp\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/home/fizza/Documents/mdu_rv32/target/scala-2.12/zinc/inc_compile_2.12.zip,true)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 9 s, completed Apr 14, 2022 4:20:35 PM[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Done"})[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[33mwarn[0m] [0m[0mIn the last 9 seconds, 7.874 (89.2%) were spent in GC. [Heap: 0.89GB free of 0.95GB, max 0.95GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/Documents/mdu_rv32/src/main/scala/Multiplier.scala","languageId":"scala","version":1,"text":"import chisel3._\nimport chisel3.util._\nimport chisel3.experimental._\n\nclass Multiplier(n:Int = 32) extends Module{\n    val io = IO(new Bundle{\n        val src_a         = Input(UInt(32.W))\n        val src_b         = Input(UInt(32.W))  \n        val op            = Input(UInt(5.W))\n        val valid         = Input(Bool())\n        val ready         = Output(Bool())\n\n        val output        = Valid(Output(UInt(32.W)))\n    })\n\n    // Multiplier\n    val cases = Array((io.op === 0.U || io.op === 1.U )     ->      (io.src_a * io.src_b),\n                    (io.op === 2.U)                         ->      io.src_a * (io.src_b.asSInt).asUInt,\n                    (io.op === 3.U)                         ->      (io.src_a.asSInt * io.src_b.asSInt).asUInt)\n\n    val out_wire = Wire(UInt(64.W))\n    out_wire := MuxCase(0.U, cases)\n\n    // Divider\n    val r_ready    = RegInit(1.U(1.W))\n    val r_counter  = RegInit(n.U(6.W))\n    val r_dividend = RegInit(0.U(n.W))\n    val r_quotient = RegInit(0.U(n.W))\n\n    io.output.valid := 0.U\n\n    // shift + substract\n    when(io.op === 5.U || io.op === 7.U){\n        val dividend  = WireInit(io.src_a.asUInt)\n        val divisor   = WireInit(io.src_b.asUInt)\n        when(io.valid === 1.U) {\n            r_ready    := 0.U\n            r_counter  := n.U\n            r_dividend := dividend\n            r_quotient := 0.U\n        }.elsewhen(r_counter =/= 0.U){\n            when(r_dividend >= (divisor<<(r_counter-1.U))){\n            r_dividend    := r_dividend - (divisor<<(r_counter-1.U))\n            r_quotient    := r_quotient + (1.U<<(r_counter-1.U))\n            }.otherwise {r_ready := 1.U}\n            r_counter  := r_counter - 1.U\n            r_ready    := (r_counter === 1.U)\n        }.otherwise{io.output.valid := 1.U}\n    }\n\n    //DIV AND REM\n    \n    io.ready     := r_ready\n    when(io.op === 0.U){\n        io.output.bits := out_wire(31,0).asUInt\n        io.output.valid := 1.U\n    }.elsewhen(io.op === 1.U || io.op === 1.U || io.op === 2.U || io.op === 3.U){\n        io.output.bits := out_wire(63,32).asUInt\n        io.output.valid := 1.U\n    }.elsewhen(io.op === 5.U){\n        io.output.bits := r_quotient.asUInt\n    }.elsewhen(io.op === 7.U){\n        io.output.bits := r_dividend.asUInt\n    }.otherwise{\n        io.output.bits := 0.U\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/Documents/mdu_rv32/src/test/scala/MultiplierTest.scala","languageId":"scala","version":1,"text":"import chisel3._\nimport org.scalatest._\nimport chiseltest._\nimport chisel3.experimental.BundleLiterals._\nimport chiseltest.experimental.TestOptionBuilder._\nimport chiseltest.internal.VerilatorBackendAnnotation\n\n\nclass MultiplierTest extends FreeSpec with ChiselScalatestTester {\n\n  \"Multiplier Gate Test\" in {\n    test(new Multiplier()){ c =>\n      c.io.src_a.poke(4294967295L.U)\n      c.io.src_b.poke(100.U)\n      c.io.valid.poke(1.B)\n      c.io.op.poke(7.U)\n      c.clock.step(1)\n      c.io.valid.poke(0.B)\n\n      c.clock.step(100)\n      c.io.output.bits.expect(\"h5f\".U)\n    }\n  }\n}\n\n\n\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/setTraceNotification: JsonRpcNotificationMessage(2.0, $/setTraceNotification, {"value":"off"})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///home/fizza/Documents/mdu_rv32/src/main/scala/MduControl.scala"}})[0m
