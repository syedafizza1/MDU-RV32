[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Processing"})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/fizza/Documents/MDU-RV32/src/main/scala/Multiplier.scala","languageId":"scala","version":1,"text":"import chisel3._\nimport chisel3.util._\nimport chisel3.experimental._\n\nclass Multiplier(n:Int = 32) extends Module{\n    val io = IO(new Bundle{\n        val src_a         = Input(SInt(32.W))\n        val src_b         = Input(SInt(32.W))  \n        val op            = Input(UInt(5.W))\n        val valid         = Input(Bool())\n        val ready         = Output(Bool())\n\n        val output        = Valid(Output(SInt(32.W)))\n    })\n\n    // Multiplier\n    val cases = Array((io.op === 0.U || io.op === 1.U )     ->      io.src_a * io.src_b,\n                    (io.op === 2.U)                         ->      io.src_a * (io.src_b.asUInt).asSInt,\n                    (io.op === 3.U)                         ->      (io.src_a.asUInt * io.src_b.asUInt).asSInt)\n\n    val out_wire = Wire(SInt(64.W))\n    out_wire := MuxCase(0.S, cases)\n\n    // Divider\n    val r_ready    = RegInit(1.U(1.W))\n    val r_counter  = RegInit(n.U(6.W))\n    val r_dividend = RegInit(0.U(n.W))\n    val r_quotient = RegInit(0.U(n.W))\n\n    io.output.valid := 0.U\n\n    // shift + substract\n\n\n    //DIV & REM\n    when(io.op === 4.U || io.op === 6.U){\n        val dividend  = WireInit(io.src_a.asUInt)\n        val divisor   = WireInit(io.src_b.asUInt)\n        when(io.valid === 1.U) {\n            r_ready    := 0.U\n            r_counter  := n.U\n            r_dividend := dividend\n            r_quotient := 0.U\n        }.elsewhen(r_counter =/= 0.U){\n            when(r_dividend >= (divisor<<(r_counter-1.U))){\n            r_dividend    := r_dividend - (divisor<<(r_counter-1.U))\n            r_quotient    := r_quotient + (1.U<<(r_counter-1.U))\n            }.otherwise {r_ready := 1.U}\n            r_counter  := r_counter - 1.U\n            r_ready    := (r_counter === 1.U)\n        }.otherwise{io.output.valid := 1.U}\n    }\n\n    //DIVU & REMU\n    when(io.op === 5.U || io.op === 7.U){\n        val dividend  = WireInit(io.src_a.asUInt)\n        val divisor   = WireInit(io.src_b.asUInt)\n        when(io.valid === 1.U) {\n            r_ready    := 0.U\n            r_counter  := n.U\n            r_dividend := dividend\n            r_quotient := 0.U\n        }.elsewhen(r_counter =/= 0.U){\n            when(r_dividend >= (divisor<<(r_counter-1.U))){\n            r_dividend    := r_dividend - (divisor<<(r_counter-1.U))\n            r_quotient    := r_quotient + (1.U<<(r_counter-1.U))\n            }.otherwise {r_ready := 1.U}\n            r_counter  := r_counter - 1.U\n            r_ready    := (r_counter === 1.U)\n        }.otherwise{io.output.valid := 1.U}\n    }\n\n    io.ready     := r_ready\n    when(io.op === 0.U){\n        io.output.bits := out_wire(31,0).asSInt\n        io.output.valid := 1.U\n    }.elsewhen(io.op === 1.U || io.op === 1.U ||io.op === 2.U || io.op === 3.U){\n        io.output.bits := out_wire(63,32).asSInt\n        io.output.valid := 1.U\n    }.elsewhen(io.op === 4.U){\n        io.output.bits := r_quotient.asSInt\n    }.elsewhen(io.op === 5.U){\n        io.output.bits := r_quotient.asSInt\n    }.elsewhen(io.op === 6.U){\n        io.output.bits := r_dividend.asSInt\n    }.elsewhen(io.op === 7.U){\n        io.output.bits := r_dividend.asSInt\n    }.otherwise{\n        io.output.bits := 0.S\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/home/fizza/Documents/MDU-RV32/target/scala-2.12/zinc/inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Apr 20, 2022 3:08:15 PM[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Done"})[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
