;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Multiplier : 
  module Multiplier : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip src_a : UInt<32>, flip src_b : UInt<32>, flip op : UInt<5>, flip valid : UInt<1>, ready : UInt<1>, output : {valid : UInt<1>, bits : UInt<32>}}
    
    node _T = eq(io.op, UInt<1>("h00")) @[Multiplier.scala 17:30]
    node _T_1 = eq(io.op, UInt<1>("h01")) @[Multiplier.scala 17:47]
    node _T_2 = or(_T, _T_1) @[Multiplier.scala 17:38]
    node _T_3 = mul(io.src_a, io.src_b) @[Multiplier.scala 17:79]
    node _T_4 = eq(io.op, UInt<2>("h02")) @[Multiplier.scala 18:28]
    node _T_5 = asSInt(io.src_b) @[Multiplier.scala 18:90]
    node _T_6 = asUInt(_T_5) @[Multiplier.scala 18:98]
    node _T_7 = mul(io.src_a, _T_6) @[Multiplier.scala 18:78]
    node _T_8 = eq(io.op, UInt<2>("h03")) @[Multiplier.scala 19:28]
    node _T_9 = asSInt(io.src_a) @[Multiplier.scala 19:79]
    node _T_10 = asSInt(io.src_b) @[Multiplier.scala 19:97]
    node _T_11 = mul(_T_9, _T_10) @[Multiplier.scala 19:86]
    node _T_12 = asUInt(_T_11) @[Multiplier.scala 19:105]
    wire out_wire : UInt<64> @[Multiplier.scala 21:24]
    node _out_wire_T = mux(_T_8, _T_12, UInt<1>("h00")) @[Mux.scala 98:16]
    node _out_wire_T_1 = mux(_T_4, _T_7, _out_wire_T) @[Mux.scala 98:16]
    node _out_wire_T_2 = mux(_T_2, _T_3, _out_wire_T_1) @[Mux.scala 98:16]
    out_wire <= _out_wire_T_2 @[Multiplier.scala 22:14]
    reg r_ready : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Multiplier.scala 25:29]
    reg r_counter : UInt<6>, clock with : (reset => (reset, UInt<6>("h020"))) @[Multiplier.scala 26:29]
    reg r_dividend : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Multiplier.scala 27:29]
    reg r_quotient : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Multiplier.scala 28:29]
    io.output.valid <= UInt<1>("h00") @[Multiplier.scala 30:21]
    node _T_13 = eq(io.op, UInt<3>("h05")) @[Multiplier.scala 33:16]
    node _T_14 = eq(io.op, UInt<3>("h07")) @[Multiplier.scala 33:33]
    node _T_15 = or(_T_13, _T_14) @[Multiplier.scala 33:24]
    when _T_15 : @[Multiplier.scala 33:41]
      wire dividend : UInt
      dividend <= io.src_a
      wire divisor : UInt
      divisor <= io.src_b
      node _T_16 = eq(io.valid, UInt<1>("h01")) @[Multiplier.scala 36:23]
      when _T_16 : @[Multiplier.scala 36:32]
        r_ready <= UInt<1>("h00") @[Multiplier.scala 37:24]
        r_counter <= UInt<6>("h020") @[Multiplier.scala 38:24]
        r_dividend <= dividend @[Multiplier.scala 39:24]
        r_quotient <= UInt<1>("h00") @[Multiplier.scala 40:24]
        skip @[Multiplier.scala 36:32]
      else : @[Multiplier.scala 41:38]
        node _T_17 = neq(r_counter, UInt<1>("h00")) @[Multiplier.scala 41:30]
        when _T_17 : @[Multiplier.scala 41:38]
          node _T_18 = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 42:52]
          node _T_19 = tail(_T_18, 1) @[Multiplier.scala 42:52]
          node _T_20 = dshl(divisor, _T_19) @[Multiplier.scala 42:40]
          node _T_21 = geq(r_dividend, _T_20) @[Multiplier.scala 42:29]
          when _T_21 : @[Multiplier.scala 42:59]
            node _r_dividend_T = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 43:63]
            node _r_dividend_T_1 = tail(_r_dividend_T, 1) @[Multiplier.scala 43:63]
            node _r_dividend_T_2 = dshl(divisor, _r_dividend_T_1) @[Multiplier.scala 43:51]
            node _r_dividend_T_3 = sub(r_dividend, _r_dividend_T_2) @[Multiplier.scala 43:41]
            node _r_dividend_T_4 = tail(_r_dividend_T_3, 1) @[Multiplier.scala 43:41]
            r_dividend <= _r_dividend_T_4 @[Multiplier.scala 43:27]
            node _r_quotient_T = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 44:59]
            node _r_quotient_T_1 = tail(_r_quotient_T, 1) @[Multiplier.scala 44:59]
            node _r_quotient_T_2 = dshl(UInt<1>("h01"), _r_quotient_T_1) @[Multiplier.scala 44:47]
            node _r_quotient_T_3 = add(r_quotient, _r_quotient_T_2) @[Multiplier.scala 44:41]
            node _r_quotient_T_4 = tail(_r_quotient_T_3, 1) @[Multiplier.scala 44:41]
            r_quotient <= _r_quotient_T_4 @[Multiplier.scala 44:27]
            skip @[Multiplier.scala 42:59]
          else : @[Multiplier.scala 45:25]
            r_ready <= UInt<1>("h01") @[Multiplier.scala 45:34]
            skip @[Multiplier.scala 45:25]
          node _r_counter_T = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 46:37]
          node _r_counter_T_1 = tail(_r_counter_T, 1) @[Multiplier.scala 46:37]
          r_counter <= _r_counter_T_1 @[Multiplier.scala 46:24]
          node _r_ready_T = eq(r_counter, UInt<1>("h01")) @[Multiplier.scala 47:38]
          r_ready <= _r_ready_T @[Multiplier.scala 47:24]
          skip @[Multiplier.scala 41:38]
        else : @[Multiplier.scala 48:20]
          io.output.valid <= UInt<1>("h01") @[Multiplier.scala 48:37]
          skip @[Multiplier.scala 48:20]
      skip @[Multiplier.scala 33:41]
    io.ready <= r_ready @[Multiplier.scala 53:18]
    node _T_22 = eq(io.op, UInt<1>("h00")) @[Multiplier.scala 54:16]
    when _T_22 : @[Multiplier.scala 54:24]
      node _io_output_bits_T = bits(out_wire, 31, 0) @[Multiplier.scala 55:35]
      io.output.bits <= _io_output_bits_T @[Multiplier.scala 55:24]
      io.output.valid <= UInt<1>("h01") @[Multiplier.scala 56:25]
      skip @[Multiplier.scala 54:24]
    else : @[Multiplier.scala 57:81]
      node _T_23 = eq(io.op, UInt<1>("h01")) @[Multiplier.scala 57:22]
      node _T_24 = eq(io.op, UInt<1>("h01")) @[Multiplier.scala 57:39]
      node _T_25 = or(_T_23, _T_24) @[Multiplier.scala 57:30]
      node _T_26 = eq(io.op, UInt<2>("h02")) @[Multiplier.scala 57:56]
      node _T_27 = or(_T_25, _T_26) @[Multiplier.scala 57:47]
      node _T_28 = eq(io.op, UInt<2>("h03")) @[Multiplier.scala 57:73]
      node _T_29 = or(_T_27, _T_28) @[Multiplier.scala 57:64]
      when _T_29 : @[Multiplier.scala 57:81]
        node _io_output_bits_T_1 = bits(out_wire, 63, 32) @[Multiplier.scala 58:35]
        io.output.bits <= _io_output_bits_T_1 @[Multiplier.scala 58:24]
        io.output.valid <= UInt<1>("h01") @[Multiplier.scala 59:25]
        skip @[Multiplier.scala 57:81]
      else : @[Multiplier.scala 60:30]
        node _T_30 = eq(io.op, UInt<3>("h05")) @[Multiplier.scala 60:22]
        when _T_30 : @[Multiplier.scala 60:30]
          io.output.bits <= r_quotient @[Multiplier.scala 61:24]
          skip @[Multiplier.scala 60:30]
        else : @[Multiplier.scala 62:30]
          node _T_31 = eq(io.op, UInt<3>("h07")) @[Multiplier.scala 62:22]
          when _T_31 : @[Multiplier.scala 62:30]
            io.output.bits <= r_dividend @[Multiplier.scala 63:24]
            skip @[Multiplier.scala 62:30]
          else : @[Multiplier.scala 64:16]
            io.output.bits <= UInt<1>("h00") @[Multiplier.scala 65:24]
            skip @[Multiplier.scala 64:16]
    
