;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Multiplier : 
  module Multiplier : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip src_a : SInt<32>, flip src_b : SInt<32>, flip op : UInt<5>, flip valid : UInt<1>, ready : UInt<1>, output : {valid : UInt<1>, bits : SInt<32>}}
    
    node _T = eq(io.op, UInt<1>("h00")) @[Multiplier.scala 17:30]
    node _T_1 = eq(io.op, UInt<1>("h01")) @[Multiplier.scala 17:47]
    node _T_2 = or(_T, _T_1) @[Multiplier.scala 17:38]
    node _T_3 = mul(io.src_a, io.src_b) @[Multiplier.scala 17:78]
    node _T_4 = eq(io.op, UInt<2>("h02")) @[Multiplier.scala 18:28]
    node _T_5 = asUInt(io.src_b) @[Multiplier.scala 18:90]
    node _T_6 = asSInt(_T_5) @[Multiplier.scala 18:98]
    node _T_7 = mul(io.src_a, _T_6) @[Multiplier.scala 18:78]
    node _T_8 = eq(io.op, UInt<2>("h03")) @[Multiplier.scala 19:28]
    node _T_9 = asUInt(io.src_a) @[Multiplier.scala 19:79]
    node _T_10 = asUInt(io.src_b) @[Multiplier.scala 19:97]
    node _T_11 = mul(_T_9, _T_10) @[Multiplier.scala 19:86]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 19:105]
    wire out_wire : SInt<64> @[Multiplier.scala 21:24]
    node _out_wire_T = mux(_T_8, _T_12, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
    node _out_wire_T_1 = mux(_T_4, _T_7, _out_wire_T) @[Mux.scala 98:16]
    node _out_wire_T_2 = mux(_T_2, _T_3, _out_wire_T_1) @[Mux.scala 98:16]
    out_wire <= _out_wire_T_2 @[Multiplier.scala 22:14]
    reg r_ready : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Multiplier.scala 25:29]
    reg r_counter : UInt<6>, clock with : (reset => (reset, UInt<6>("h020"))) @[Multiplier.scala 26:29]
    reg r_dividend : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Multiplier.scala 27:29]
    reg r_quotient : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Multiplier.scala 28:29]
    io.output.valid <= UInt<1>("h00") @[Multiplier.scala 30:21]
    node _T_13 = eq(io.op, UInt<3>("h04")) @[Multiplier.scala 36:16]
    node _T_14 = eq(io.op, UInt<3>("h06")) @[Multiplier.scala 36:33]
    node _T_15 = or(_T_13, _T_14) @[Multiplier.scala 36:24]
    when _T_15 : @[Multiplier.scala 36:41]
      node _dividend_T = asUInt(io.src_a) @[Multiplier.scala 37:43]
      wire dividend : UInt
      dividend <= _dividend_T
      node _divisor_T = asUInt(io.src_b) @[Multiplier.scala 38:43]
      wire divisor : UInt
      divisor <= _divisor_T
      node _T_16 = eq(io.valid, UInt<1>("h01")) @[Multiplier.scala 39:23]
      when _T_16 : @[Multiplier.scala 39:32]
        r_ready <= UInt<1>("h00") @[Multiplier.scala 40:24]
        r_counter <= UInt<6>("h020") @[Multiplier.scala 41:24]
        r_dividend <= dividend @[Multiplier.scala 42:24]
        r_quotient <= UInt<1>("h00") @[Multiplier.scala 43:24]
        skip @[Multiplier.scala 39:32]
      else : @[Multiplier.scala 44:38]
        node _T_17 = neq(r_counter, UInt<1>("h00")) @[Multiplier.scala 44:30]
        when _T_17 : @[Multiplier.scala 44:38]
          node _T_18 = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 45:52]
          node _T_19 = tail(_T_18, 1) @[Multiplier.scala 45:52]
          node _T_20 = dshl(divisor, _T_19) @[Multiplier.scala 45:40]
          node _T_21 = geq(r_dividend, _T_20) @[Multiplier.scala 45:29]
          when _T_21 : @[Multiplier.scala 45:59]
            node _r_dividend_T = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 46:63]
            node _r_dividend_T_1 = tail(_r_dividend_T, 1) @[Multiplier.scala 46:63]
            node _r_dividend_T_2 = dshl(divisor, _r_dividend_T_1) @[Multiplier.scala 46:51]
            node _r_dividend_T_3 = sub(r_dividend, _r_dividend_T_2) @[Multiplier.scala 46:41]
            node _r_dividend_T_4 = tail(_r_dividend_T_3, 1) @[Multiplier.scala 46:41]
            r_dividend <= _r_dividend_T_4 @[Multiplier.scala 46:27]
            node _r_quotient_T = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 47:59]
            node _r_quotient_T_1 = tail(_r_quotient_T, 1) @[Multiplier.scala 47:59]
            node _r_quotient_T_2 = dshl(UInt<1>("h01"), _r_quotient_T_1) @[Multiplier.scala 47:47]
            node _r_quotient_T_3 = add(r_quotient, _r_quotient_T_2) @[Multiplier.scala 47:41]
            node _r_quotient_T_4 = tail(_r_quotient_T_3, 1) @[Multiplier.scala 47:41]
            r_quotient <= _r_quotient_T_4 @[Multiplier.scala 47:27]
            skip @[Multiplier.scala 45:59]
          else : @[Multiplier.scala 48:25]
            r_ready <= UInt<1>("h01") @[Multiplier.scala 48:34]
            skip @[Multiplier.scala 48:25]
          node _r_counter_T = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 49:37]
          node _r_counter_T_1 = tail(_r_counter_T, 1) @[Multiplier.scala 49:37]
          r_counter <= _r_counter_T_1 @[Multiplier.scala 49:24]
          node _r_ready_T = eq(r_counter, UInt<1>("h01")) @[Multiplier.scala 50:38]
          r_ready <= _r_ready_T @[Multiplier.scala 50:24]
          skip @[Multiplier.scala 44:38]
        else : @[Multiplier.scala 51:20]
          io.output.valid <= UInt<1>("h01") @[Multiplier.scala 51:37]
          skip @[Multiplier.scala 51:20]
      skip @[Multiplier.scala 36:41]
    node _T_22 = eq(io.op, UInt<3>("h05")) @[Multiplier.scala 55:16]
    node _T_23 = eq(io.op, UInt<3>("h07")) @[Multiplier.scala 55:33]
    node _T_24 = or(_T_22, _T_23) @[Multiplier.scala 55:24]
    when _T_24 : @[Multiplier.scala 55:41]
      node _dividend_T_1 = asUInt(io.src_a) @[Multiplier.scala 56:43]
      wire dividend_1 : UInt
      dividend_1 <= _dividend_T_1
      node _divisor_T_1 = asUInt(io.src_b) @[Multiplier.scala 57:43]
      wire divisor_1 : UInt
      divisor_1 <= _divisor_T_1
      node _T_25 = eq(io.valid, UInt<1>("h01")) @[Multiplier.scala 58:23]
      when _T_25 : @[Multiplier.scala 58:32]
        r_ready <= UInt<1>("h00") @[Multiplier.scala 59:24]
        r_counter <= UInt<6>("h020") @[Multiplier.scala 60:24]
        r_dividend <= dividend_1 @[Multiplier.scala 61:24]
        r_quotient <= UInt<1>("h00") @[Multiplier.scala 62:24]
        skip @[Multiplier.scala 58:32]
      else : @[Multiplier.scala 63:38]
        node _T_26 = neq(r_counter, UInt<1>("h00")) @[Multiplier.scala 63:30]
        when _T_26 : @[Multiplier.scala 63:38]
          node _T_27 = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 64:52]
          node _T_28 = tail(_T_27, 1) @[Multiplier.scala 64:52]
          node _T_29 = dshl(divisor_1, _T_28) @[Multiplier.scala 64:40]
          node _T_30 = geq(r_dividend, _T_29) @[Multiplier.scala 64:29]
          when _T_30 : @[Multiplier.scala 64:59]
            node _r_dividend_T_5 = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 65:63]
            node _r_dividend_T_6 = tail(_r_dividend_T_5, 1) @[Multiplier.scala 65:63]
            node _r_dividend_T_7 = dshl(divisor_1, _r_dividend_T_6) @[Multiplier.scala 65:51]
            node _r_dividend_T_8 = sub(r_dividend, _r_dividend_T_7) @[Multiplier.scala 65:41]
            node _r_dividend_T_9 = tail(_r_dividend_T_8, 1) @[Multiplier.scala 65:41]
            r_dividend <= _r_dividend_T_9 @[Multiplier.scala 65:27]
            node _r_quotient_T_5 = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 66:59]
            node _r_quotient_T_6 = tail(_r_quotient_T_5, 1) @[Multiplier.scala 66:59]
            node _r_quotient_T_7 = dshl(UInt<1>("h01"), _r_quotient_T_6) @[Multiplier.scala 66:47]
            node _r_quotient_T_8 = add(r_quotient, _r_quotient_T_7) @[Multiplier.scala 66:41]
            node _r_quotient_T_9 = tail(_r_quotient_T_8, 1) @[Multiplier.scala 66:41]
            r_quotient <= _r_quotient_T_9 @[Multiplier.scala 66:27]
            skip @[Multiplier.scala 64:59]
          else : @[Multiplier.scala 67:25]
            r_ready <= UInt<1>("h01") @[Multiplier.scala 67:34]
            skip @[Multiplier.scala 67:25]
          node _r_counter_T_2 = sub(r_counter, UInt<1>("h01")) @[Multiplier.scala 68:37]
          node _r_counter_T_3 = tail(_r_counter_T_2, 1) @[Multiplier.scala 68:37]
          r_counter <= _r_counter_T_3 @[Multiplier.scala 68:24]
          node _r_ready_T_1 = eq(r_counter, UInt<1>("h01")) @[Multiplier.scala 69:38]
          r_ready <= _r_ready_T_1 @[Multiplier.scala 69:24]
          skip @[Multiplier.scala 63:38]
        else : @[Multiplier.scala 70:20]
          io.output.valid <= UInt<1>("h01") @[Multiplier.scala 70:37]
          skip @[Multiplier.scala 70:20]
      skip @[Multiplier.scala 55:41]
    io.ready <= r_ready @[Multiplier.scala 73:18]
    node _T_31 = eq(io.op, UInt<1>("h00")) @[Multiplier.scala 74:16]
    when _T_31 : @[Multiplier.scala 74:24]
      node _io_output_bits_T = bits(out_wire, 31, 0) @[Multiplier.scala 75:35]
      node _io_output_bits_T_1 = asSInt(_io_output_bits_T) @[Multiplier.scala 75:42]
      io.output.bits <= _io_output_bits_T_1 @[Multiplier.scala 75:24]
      io.output.valid <= UInt<1>("h01") @[Multiplier.scala 76:25]
      skip @[Multiplier.scala 74:24]
    else : @[Multiplier.scala 77:80]
      node _T_32 = eq(io.op, UInt<1>("h01")) @[Multiplier.scala 77:22]
      node _T_33 = eq(io.op, UInt<1>("h01")) @[Multiplier.scala 77:39]
      node _T_34 = or(_T_32, _T_33) @[Multiplier.scala 77:30]
      node _T_35 = eq(io.op, UInt<2>("h02")) @[Multiplier.scala 77:55]
      node _T_36 = or(_T_34, _T_35) @[Multiplier.scala 77:47]
      node _T_37 = eq(io.op, UInt<2>("h03")) @[Multiplier.scala 77:72]
      node _T_38 = or(_T_36, _T_37) @[Multiplier.scala 77:63]
      when _T_38 : @[Multiplier.scala 77:80]
        node _io_output_bits_T_2 = bits(out_wire, 63, 32) @[Multiplier.scala 78:35]
        node _io_output_bits_T_3 = asSInt(_io_output_bits_T_2) @[Multiplier.scala 78:43]
        io.output.bits <= _io_output_bits_T_3 @[Multiplier.scala 78:24]
        io.output.valid <= UInt<1>("h01") @[Multiplier.scala 79:25]
        skip @[Multiplier.scala 77:80]
      else : @[Multiplier.scala 80:30]
        node _T_39 = eq(io.op, UInt<3>("h04")) @[Multiplier.scala 80:22]
        when _T_39 : @[Multiplier.scala 80:30]
          node _io_output_bits_T_4 = asSInt(r_quotient) @[Multiplier.scala 81:38]
          io.output.bits <= _io_output_bits_T_4 @[Multiplier.scala 81:24]
          skip @[Multiplier.scala 80:30]
        else : @[Multiplier.scala 82:30]
          node _T_40 = eq(io.op, UInt<3>("h05")) @[Multiplier.scala 82:22]
          when _T_40 : @[Multiplier.scala 82:30]
            node _io_output_bits_T_5 = asSInt(r_quotient) @[Multiplier.scala 83:38]
            io.output.bits <= _io_output_bits_T_5 @[Multiplier.scala 83:24]
            skip @[Multiplier.scala 82:30]
          else : @[Multiplier.scala 84:30]
            node _T_41 = eq(io.op, UInt<3>("h06")) @[Multiplier.scala 84:22]
            when _T_41 : @[Multiplier.scala 84:30]
              node _io_output_bits_T_6 = asSInt(r_dividend) @[Multiplier.scala 85:38]
              io.output.bits <= _io_output_bits_T_6 @[Multiplier.scala 85:24]
              skip @[Multiplier.scala 84:30]
            else : @[Multiplier.scala 86:30]
              node _T_42 = eq(io.op, UInt<3>("h07")) @[Multiplier.scala 86:22]
              when _T_42 : @[Multiplier.scala 86:30]
                node _io_output_bits_T_7 = asSInt(r_dividend) @[Multiplier.scala 87:38]
                io.output.bits <= _io_output_bits_T_7 @[Multiplier.scala 87:24]
                skip @[Multiplier.scala 86:30]
              else : @[Multiplier.scala 88:16]
                io.output.bits <= asSInt(UInt<1>("h00")) @[Multiplier.scala 89:24]
                skip @[Multiplier.scala 88:16]
    
