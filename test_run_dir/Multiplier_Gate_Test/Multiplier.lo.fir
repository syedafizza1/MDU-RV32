circuit Multiplier :
  module Multiplier :
    input clock : Clock
    input reset : UInt<1>
    input io_src_a : SInt<32>
    input io_src_b : SInt<32>
    input io_op : UInt<5>
    input io_valid : UInt<1>
    output io_ready : UInt<1>
    output io_output_valid : UInt<1>
    output io_output_bits : SInt<32>

    node _T = eq(io_op, UInt<1>("h0")) @[Multiplier.scala 17:30]
    node _T_1 = eq(io_op, UInt<1>("h1")) @[Multiplier.scala 17:47]
    node _T_2 = or(_T, _T_1) @[Multiplier.scala 17:38]
    node _T_3 = mul(io_src_a, io_src_b) @[Multiplier.scala 17:78]
    node _T_4 = eq(io_op, UInt<2>("h2")) @[Multiplier.scala 18:28]
    node _T_5 = asUInt(io_src_b) @[Multiplier.scala 18:90]
    node _T_6 = asSInt(_T_5) @[Multiplier.scala 18:98]
    node _T_7 = mul(io_src_a, _T_6) @[Multiplier.scala 18:78]
    node _T_8 = eq(io_op, UInt<2>("h3")) @[Multiplier.scala 19:28]
    node _T_9 = asUInt(io_src_a) @[Multiplier.scala 19:79]
    node _T_10 = asUInt(io_src_b) @[Multiplier.scala 19:97]
    node _T_11 = mul(_T_9, _T_10) @[Multiplier.scala 19:86]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 19:105]
    node _out_wire_T = mux(_T_8, _T_12, asSInt(UInt<1>("h0"))) @[Mux.scala 98:16]
    node _out_wire_T_1 = mux(_T_4, _T_7, _out_wire_T) @[Mux.scala 98:16]
    node _out_wire_T_2 = mux(_T_2, _T_3, _out_wire_T_1) @[Mux.scala 98:16]
    reg r_ready : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_ready) @[Multiplier.scala 25:29]
    reg r_counter : UInt<6>, clock with :
      reset => (UInt<1>("h0"), r_counter) @[Multiplier.scala 26:29]
    reg r_dividend : UInt<32>, clock with :
      reset => (UInt<1>("h0"), r_dividend) @[Multiplier.scala 27:29]
    reg r_quotient : UInt<32>, clock with :
      reset => (UInt<1>("h0"), r_quotient) @[Multiplier.scala 28:29]
    node _T_13 = eq(io_op, UInt<3>("h4")) @[Multiplier.scala 36:16]
    node _T_14 = eq(io_op, UInt<3>("h6")) @[Multiplier.scala 36:33]
    node _T_15 = or(_T_13, _T_14) @[Multiplier.scala 36:24]
    node _dividend_T = asUInt(io_src_a) @[Multiplier.scala 37:43]
    node _divisor_T = asUInt(io_src_b) @[Multiplier.scala 38:43]
    node _T_16 = eq(io_valid, UInt<1>("h1")) @[Multiplier.scala 39:23]
    node _T_17 = neq(r_counter, UInt<1>("h0")) @[Multiplier.scala 44:30]
    node _T_18 = sub(r_counter, UInt<1>("h1")) @[Multiplier.scala 45:52]
    node _T_19 = tail(_T_18, 1) @[Multiplier.scala 45:52]
    node divisor = _divisor_T
    node _T_20 = dshl(divisor, _T_19) @[Multiplier.scala 45:40]
    node _T_21 = geq(r_dividend, _T_20) @[Multiplier.scala 45:29]
    node _r_dividend_T = sub(r_counter, UInt<1>("h1")) @[Multiplier.scala 46:63]
    node _r_dividend_T_1 = tail(_r_dividend_T, 1) @[Multiplier.scala 46:63]
    node _r_dividend_T_2 = dshl(divisor, _r_dividend_T_1) @[Multiplier.scala 46:51]
    node _r_dividend_T_3 = sub(r_dividend, _r_dividend_T_2) @[Multiplier.scala 46:41]
    node _r_dividend_T_4 = tail(_r_dividend_T_3, 1) @[Multiplier.scala 46:41]
    node _r_quotient_T = sub(r_counter, UInt<1>("h1")) @[Multiplier.scala 47:59]
    node _r_quotient_T_1 = tail(_r_quotient_T, 1) @[Multiplier.scala 47:59]
    node _r_quotient_T_2 = dshl(UInt<1>("h1"), _r_quotient_T_1) @[Multiplier.scala 47:47]
    node _r_quotient_T_3 = add(r_quotient, _r_quotient_T_2) @[Multiplier.scala 47:41]
    node _r_quotient_T_4 = tail(_r_quotient_T_3, 1) @[Multiplier.scala 47:41]
    node _GEN_0 = mux(_T_21, _r_dividend_T_4, r_dividend) @[Multiplier.scala 45:59 Multiplier.scala 46:27 Multiplier.scala 27:29]
    node _GEN_1 = mux(_T_21, _r_quotient_T_4, r_quotient) @[Multiplier.scala 45:59 Multiplier.scala 47:27 Multiplier.scala 28:29]
    node _GEN_2 = mux(_T_21, r_ready, UInt<1>("h1")) @[Multiplier.scala 45:59 Multiplier.scala 25:29 Multiplier.scala 48:34]
    node _r_counter_T = sub(r_counter, UInt<1>("h1")) @[Multiplier.scala 49:37]
    node _r_counter_T_1 = tail(_r_counter_T, 1) @[Multiplier.scala 49:37]
    node _r_ready_T = eq(r_counter, UInt<1>("h1")) @[Multiplier.scala 50:38]
    node _GEN_3 = mux(_T_17, _GEN_0, r_dividend) @[Multiplier.scala 44:38 Multiplier.scala 27:29]
    node _GEN_4 = mux(_T_17, _GEN_1, r_quotient) @[Multiplier.scala 44:38 Multiplier.scala 28:29]
    node _GEN_5 = mux(_T_17, _r_ready_T, r_ready) @[Multiplier.scala 44:38 Multiplier.scala 50:24 Multiplier.scala 25:29]
    node _GEN_6 = mux(_T_17, _r_counter_T_1, r_counter) @[Multiplier.scala 44:38 Multiplier.scala 49:24 Multiplier.scala 26:29]
    node _GEN_7 = mux(_T_17, UInt<1>("h0"), UInt<1>("h1")) @[Multiplier.scala 44:38 Multiplier.scala 30:21 Multiplier.scala 51:37]
    node _GEN_8 = mux(_T_16, UInt<1>("h0"), _GEN_5) @[Multiplier.scala 39:32 Multiplier.scala 40:24]
    node _GEN_9 = mux(_T_16, UInt<6>("h20"), _GEN_6) @[Multiplier.scala 39:32 Multiplier.scala 41:24]
    node dividend = _dividend_T
    node _GEN_10 = mux(_T_16, dividend, _GEN_3) @[Multiplier.scala 39:32 Multiplier.scala 42:24]
    node _GEN_11 = mux(_T_16, UInt<1>("h0"), _GEN_4) @[Multiplier.scala 39:32 Multiplier.scala 43:24]
    node _GEN_12 = mux(_T_16, UInt<1>("h0"), _GEN_7) @[Multiplier.scala 39:32 Multiplier.scala 30:21]
    node _GEN_13 = mux(_T_15, _GEN_8, r_ready) @[Multiplier.scala 36:41 Multiplier.scala 25:29]
    node _GEN_14 = mux(_T_15, _GEN_9, r_counter) @[Multiplier.scala 36:41 Multiplier.scala 26:29]
    node _GEN_15 = mux(_T_15, _GEN_10, r_dividend) @[Multiplier.scala 36:41 Multiplier.scala 27:29]
    node _GEN_16 = mux(_T_15, _GEN_11, r_quotient) @[Multiplier.scala 36:41 Multiplier.scala 28:29]
    node _GEN_17 = mux(_T_15, _GEN_12, UInt<1>("h0")) @[Multiplier.scala 36:41 Multiplier.scala 30:21]
    node _T_22 = eq(io_op, UInt<3>("h5")) @[Multiplier.scala 55:16]
    node _T_23 = eq(io_op, UInt<3>("h7")) @[Multiplier.scala 55:33]
    node _T_24 = or(_T_22, _T_23) @[Multiplier.scala 55:24]
    node _dividend_T_1 = asUInt(io_src_a) @[Multiplier.scala 56:43]
    node _divisor_T_1 = asUInt(io_src_b) @[Multiplier.scala 57:43]
    node _T_25 = eq(io_valid, UInt<1>("h1")) @[Multiplier.scala 58:23]
    node _T_26 = neq(r_counter, UInt<1>("h0")) @[Multiplier.scala 63:30]
    node _T_27 = sub(r_counter, UInt<1>("h1")) @[Multiplier.scala 64:52]
    node _T_28 = tail(_T_27, 1) @[Multiplier.scala 64:52]
    node divisor_1 = _divisor_T_1
    node _T_29 = dshl(divisor_1, _T_28) @[Multiplier.scala 64:40]
    node _T_30 = geq(r_dividend, _T_29) @[Multiplier.scala 64:29]
    node _r_dividend_T_5 = sub(r_counter, UInt<1>("h1")) @[Multiplier.scala 65:63]
    node _r_dividend_T_6 = tail(_r_dividend_T_5, 1) @[Multiplier.scala 65:63]
    node _r_dividend_T_7 = dshl(divisor_1, _r_dividend_T_6) @[Multiplier.scala 65:51]
    node _r_dividend_T_8 = sub(r_dividend, _r_dividend_T_7) @[Multiplier.scala 65:41]
    node _r_dividend_T_9 = tail(_r_dividend_T_8, 1) @[Multiplier.scala 65:41]
    node _r_quotient_T_5 = sub(r_counter, UInt<1>("h1")) @[Multiplier.scala 66:59]
    node _r_quotient_T_6 = tail(_r_quotient_T_5, 1) @[Multiplier.scala 66:59]
    node _r_quotient_T_7 = dshl(UInt<1>("h1"), _r_quotient_T_6) @[Multiplier.scala 66:47]
    node _r_quotient_T_8 = add(r_quotient, _r_quotient_T_7) @[Multiplier.scala 66:41]
    node _r_quotient_T_9 = tail(_r_quotient_T_8, 1) @[Multiplier.scala 66:41]
    node _GEN_18 = mux(_T_30, _r_dividend_T_9, _GEN_15) @[Multiplier.scala 64:59 Multiplier.scala 65:27]
    node _GEN_19 = mux(_T_30, _r_quotient_T_9, _GEN_16) @[Multiplier.scala 64:59 Multiplier.scala 66:27]
    node _GEN_20 = mux(_T_30, _GEN_13, UInt<1>("h1")) @[Multiplier.scala 64:59 Multiplier.scala 67:34]
    node _r_counter_T_2 = sub(r_counter, UInt<1>("h1")) @[Multiplier.scala 68:37]
    node _r_counter_T_3 = tail(_r_counter_T_2, 1) @[Multiplier.scala 68:37]
    node _r_ready_T_1 = eq(r_counter, UInt<1>("h1")) @[Multiplier.scala 69:38]
    node _GEN_21 = mux(_T_26, _GEN_18, _GEN_15) @[Multiplier.scala 63:38]
    node _GEN_22 = mux(_T_26, _GEN_19, _GEN_16) @[Multiplier.scala 63:38]
    node _GEN_23 = mux(_T_26, _r_ready_T_1, _GEN_13) @[Multiplier.scala 63:38 Multiplier.scala 69:24]
    node _GEN_24 = mux(_T_26, _r_counter_T_3, _GEN_14) @[Multiplier.scala 63:38 Multiplier.scala 68:24]
    node _GEN_25 = mux(_T_26, _GEN_17, UInt<1>("h1")) @[Multiplier.scala 63:38 Multiplier.scala 70:37]
    node _GEN_26 = mux(_T_25, UInt<1>("h0"), _GEN_23) @[Multiplier.scala 58:32 Multiplier.scala 59:24]
    node _GEN_27 = mux(_T_25, UInt<6>("h20"), _GEN_24) @[Multiplier.scala 58:32 Multiplier.scala 60:24]
    node dividend_1 = _dividend_T_1
    node _GEN_28 = mux(_T_25, dividend_1, _GEN_21) @[Multiplier.scala 58:32 Multiplier.scala 61:24]
    node _GEN_29 = mux(_T_25, UInt<1>("h0"), _GEN_22) @[Multiplier.scala 58:32 Multiplier.scala 62:24]
    node _GEN_30 = mux(_T_25, _GEN_17, _GEN_25) @[Multiplier.scala 58:32]
    node _GEN_31 = mux(_T_24, _GEN_26, _GEN_13) @[Multiplier.scala 55:41]
    node _GEN_32 = mux(_T_24, _GEN_27, _GEN_14) @[Multiplier.scala 55:41]
    node _GEN_33 = mux(_T_24, _GEN_28, _GEN_15) @[Multiplier.scala 55:41]
    node _GEN_34 = mux(_T_24, _GEN_29, _GEN_16) @[Multiplier.scala 55:41]
    node _GEN_35 = mux(_T_24, _GEN_30, _GEN_17) @[Multiplier.scala 55:41]
    node _T_31 = eq(io_op, UInt<1>("h0")) @[Multiplier.scala 74:16]
    node out_wire = _out_wire_T_2 @[Multiplier.scala 21:24 Multiplier.scala 22:14]
    node _io_output_bits_T = bits(out_wire, 31, 0) @[Multiplier.scala 75:35]
    node _io_output_bits_T_1 = asSInt(_io_output_bits_T) @[Multiplier.scala 75:42]
    node _T_32 = eq(io_op, UInt<1>("h1")) @[Multiplier.scala 77:22]
    node _T_33 = eq(io_op, UInt<1>("h1")) @[Multiplier.scala 77:39]
    node _T_34 = or(_T_32, _T_33) @[Multiplier.scala 77:30]
    node _T_35 = eq(io_op, UInt<2>("h2")) @[Multiplier.scala 77:55]
    node _T_36 = or(_T_34, _T_35) @[Multiplier.scala 77:47]
    node _T_37 = eq(io_op, UInt<2>("h3")) @[Multiplier.scala 77:72]
    node _T_38 = or(_T_36, _T_37) @[Multiplier.scala 77:63]
    node _io_output_bits_T_2 = bits(out_wire, 63, 32) @[Multiplier.scala 78:35]
    node _io_output_bits_T_3 = asSInt(_io_output_bits_T_2) @[Multiplier.scala 78:43]
    node _T_39 = eq(io_op, UInt<3>("h4")) @[Multiplier.scala 80:22]
    node _io_output_bits_T_4 = asSInt(r_quotient) @[Multiplier.scala 81:38]
    node _T_40 = eq(io_op, UInt<3>("h5")) @[Multiplier.scala 82:22]
    node _io_output_bits_T_5 = asSInt(r_quotient) @[Multiplier.scala 83:38]
    node _T_41 = eq(io_op, UInt<3>("h6")) @[Multiplier.scala 84:22]
    node _io_output_bits_T_6 = asSInt(r_dividend) @[Multiplier.scala 85:38]
    node _T_42 = eq(io_op, UInt<3>("h7")) @[Multiplier.scala 86:22]
    node _io_output_bits_T_7 = asSInt(r_dividend) @[Multiplier.scala 87:38]
    node _GEN_36 = mux(_T_42, _io_output_bits_T_7, asSInt(UInt<1>("h0"))) @[Multiplier.scala 86:30 Multiplier.scala 87:24 Multiplier.scala 89:24]
    node _GEN_37 = mux(_T_41, _io_output_bits_T_6, _GEN_36) @[Multiplier.scala 84:30 Multiplier.scala 85:24]
    node _GEN_38 = mux(_T_40, _io_output_bits_T_5, _GEN_37) @[Multiplier.scala 82:30 Multiplier.scala 83:24]
    node _GEN_39 = mux(_T_39, _io_output_bits_T_4, _GEN_38) @[Multiplier.scala 80:30 Multiplier.scala 81:24]
    node _GEN_40 = mux(_T_38, _io_output_bits_T_3, _GEN_39) @[Multiplier.scala 77:80 Multiplier.scala 78:24]
    node _GEN_41 = mux(_T_38, UInt<1>("h1"), _GEN_35) @[Multiplier.scala 77:80 Multiplier.scala 79:25]
    node _GEN_42 = mux(_T_31, _io_output_bits_T_1, _GEN_40) @[Multiplier.scala 74:24 Multiplier.scala 75:24]
    node _GEN_43 = mux(_T_31, UInt<1>("h1"), _GEN_41) @[Multiplier.scala 74:24 Multiplier.scala 76:25]
    io_ready <= r_ready @[Multiplier.scala 73:18]
    io_output_valid <= _GEN_43
    io_output_bits <= _GEN_42
    r_ready <= mux(reset, UInt<1>("h1"), _GEN_31) @[Multiplier.scala 25:29 Multiplier.scala 25:29]
    r_counter <= mux(reset, UInt<6>("h20"), _GEN_32) @[Multiplier.scala 26:29 Multiplier.scala 26:29]
    r_dividend <= mux(reset, UInt<32>("h0"), bits(_GEN_33, 31, 0)) @[Multiplier.scala 27:29 Multiplier.scala 27:29]
    r_quotient <= mux(reset, UInt<32>("h0"), bits(_GEN_34, 31, 0)) @[Multiplier.scala 28:29 Multiplier.scala 28:29]
